{"version":3,"file":"semantic-validate.umd.js","sources":["../src/Core/Core.ts","../src/SemanticValidate/SemanticValidate.ts"],"sourcesContent":["import DOMPurify from 'dompurify';\r\nimport { Form, Lang, Options, Rule, Schema } from '../types/types.js';\r\n\r\nexport default class Core {\r\n    form: Form;\r\n    lang: Lang;\r\n    options: Options;\r\n    rules: Map<string, Rule>;\r\n\r\n    /**\r\n     * \r\n     * @param form \r\n     * @param options \r\n     */\r\n    constructor(form: string, options: Options = {}) {\r\n        this.form = new WeakRef(document.querySelector(form));\r\n        this.options = options;\r\n        this.rules = new Map();\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    validate() {}\r\n\r\n    /**\r\n     * \r\n     * @param lang \r\n     * @returns \r\n     */\r\n    setLang(lang: string) {\r\n        this.lang = lang;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param rules \r\n     * @returns \r\n     */\r\n    setRules(rules: Rule[]) {\r\n        for(const rule of rules) {\r\n            if (!this.rules.has(rule.name)) {\r\n                this.throwError(new Error(`The ${rule.name} rule already exists!`));\r\n            }\r\n\r\n            this.rules.set(rule.name, rule);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param schema \r\n     * @returns \r\n     */\r\n    setSchema(schema: Schema) {\r\n        const strategy = {\r\n            lang: (value) => this.lang = value,\r\n            rules: (value) => this.setRules(value),\r\n        };\r\n\r\n        for (const [key, value] of Object.entries(schema)) {\r\n            strategy[key](value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    disableNativeValidation(flag = true) {\r\n        this.form.deref().setAttribute('novalidate', String(flag));\r\n    }\r\n\r\n    setElementRules(element, rules) {\r\n        for(const [attr, value] of Object.entries(rules)) {\r\n            if (attr === 'name') continue;\r\n            element.setAttribute(attr, value);\r\n        }\r\n    }\r\n\r\n    bindElementsWithRules() {\r\n        const onInput = (event) => {\r\n            // console.log(event.target.validity);\r\n        };\r\n\r\n        for(const element of this.form.deref().elements) {\r\n            const name = element.getAttribute('name');\r\n            \r\n            if (!name) continue;\r\n\r\n            const rules = this.rules.get(name);\r\n\r\n            if (!rules) continue;\r\n            \r\n            this.setElementRules(element, rules);\r\n\r\n            element.removeEventListener('input', onInput);  \r\n            element.addEventListener('input', onInput);\r\n        }\r\n    }\r\n\r\n    sanitize(value: FormDataEntryValue) {\r\n        return DOMPurify.sanitize(value as string);\r\n    }\r\n\r\n    getData() {\r\n\r\n        const handleSelectMultiple = ([name, value]) => {\r\n            const rules = this.rules.get(name);\r\n\r\n            if (rules.type === 'select' && rules.multiple) {\r\n                const select = this.form.deref().elements[name] as HTMLSelectElement;\r\n\r\n                const selectedValues = [...select.selectedOptions]\r\n                    .filter(option => option.selected)\r\n                    .map(option => option.value)\r\n\r\n                return [name, selectedValues];\r\n            }\r\n\r\n            return [name, value];\r\n        }\r\n\r\n        const formData = Array\r\n            .from(new FormData(this.form.deref()).entries())\r\n            .map(handleSelectMultiple)\r\n            .map(([name, value]) => {\r\n                return [\r\n                    name,\r\n                    this.options.sanitize ? this.sanitize(value) : value,\r\n                ];                \r\n            });\r\n\r\n        return Object.fromEntries(formData);\r\n    }\r\n\r\n    getDataSerialized() {\r\n        const formDataSerialized = new URLSearchParams();\r\n\r\n        Array\r\n            .from(Object.entries(this.getData()))\r\n            .forEach(([name, value]) => formDataSerialized.set(name, String(value)));\r\n\r\n        console.log(new URLSearchParams(formDataSerialized.toString()).get('select2'));\r\n        \r\n\r\n        \r\n        return formDataSerialized.toString();\r\n    }\r\n\r\n    throwError(error: Error) {\r\n\r\n    }\r\n}","import { Core } from \"../Core\";\r\nimport { Lang, Options, Rule, Schema } from \"../types/types\";\r\n\r\nexport default class SemanticValidate extends Core {\r\n    /**\r\n     * \r\n     * @param form \r\n     * @param options \r\n     */\r\n    constructor(form: string, options?: Options) {\r\n        super(form, options);\r\n    }\r\n\r\n    /**\r\n     * Add a lang to setup right messages\r\n     * @param lang \r\n     * @returns SemanticValidate instance\r\n     */\r\n    addLang(lang: Lang): SemanticValidate {\r\n        return super.setLang(lang);\r\n    }\r\n\r\n    /**\r\n     * Add rules for de fields\r\n     * @param rules \r\n     * @returns SemanticValidate instance\r\n     */\r\n    addRules(rules: Rule[]) {\r\n        return super.setRules(rules);\r\n    }\r\n\r\n    /**\r\n     * Add a schema\r\n     * @param schema \r\n     * @returns SemanticValidate instance\r\n     */\r\n    addSchema(schema: Schema): SemanticValidate {\r\n        return this.setSchema(schema);\r\n    }\r\n\r\n    /**\r\n     * Render form based on rules\r\n     * @returns SemanticValidate instance\r\n     */\r\n    render(): SemanticValidate {\r\n        super.disableNativeValidation();\r\n        super.bindElementsWithRules();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Trigger the fn callback when form is sumitted\r\n     * @param fn \r\n     */\r\n    whenSubmit(fn) {\r\n        const handler = (event: Event) => {\r\n            event.preventDefault();\r\n\r\n            fn(event, {\r\n                valid: this.form.deref().checkValidity(),\r\n                values: super.getData(),\r\n                ...(this.options.serialized && { \r\n                    serialized: super.getDataSerialized() \r\n                }),\r\n            });\r\n        };\r\n\r\n        this.form.deref().removeEventListener('submit', handler);\r\n        this.form.deref().addEventListener('submit', handler);\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}